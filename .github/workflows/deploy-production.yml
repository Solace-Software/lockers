name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./gym_lockers
          file: ./gym_lockers/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend production image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./gym_lockers/client
          file: ./gym_lockers/client/Dockerfile.production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MQTT_USERNAME: ${{ secrets.MQTT_USERNAME }}
          MQTT_PASSWORD: ${{ secrets.MQTT_PASSWORD }}
          DOMAIN: ${{ secrets.DOMAIN }}
          BACKEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          FRONTEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "üöÄ Starting deployment to ${{ github.event.inputs.environment || 'production' }}..."
          
          # Navigate to deployment directory
          cd /opt/gym-lockers || { echo "‚ùå Deployment directory not found"; exit 1; }
          
          # Backup current deployment
          echo "üíæ Creating backup..."
          sudo docker compose down || true
          sudo cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # Pull latest code
          echo "üìã Pulling latest changes..."
          sudo git fetch origin
          sudo git reset --hard origin/main
          
          # Create production environment file
          echo "‚öôÔ∏è  Setting up environment..."
          sudo tee .env << ENVEOF
          DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD
          DB_NAME=gym_lockers
          DB_USER=gym_admin
          DB_PASSWORD=$DB_PASSWORD
          MQTT_USERNAME=$MQTT_USERNAME
          MQTT_PASSWORD=$MQTT_PASSWORD
          NODE_ENV=production
          DEBUG_MODE=false
          DOMAIN=$DOMAIN
          BACKEND_IMAGE=$BACKEND_IMAGE
          FRONTEND_IMAGE=$FRONTEND_IMAGE
          ENVEOF
          
          # Create production docker-compose override
          sudo tee docker-compose.prod.yml << PRODEOF
          version: '3.8'
          services:
            backend:
              image: \${BACKEND_IMAGE}
              environment:
                - NODE_ENV=production
                - DEBUG_MODE=false
            
            frontend-builder:
              image: \${FRONTEND_IMAGE}
              profiles:
                - prod
          PRODEOF
          
          # Log in to GitHub Container Registry
          echo "üîê Logging into container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          echo "üì• Pulling latest images..."
          sudo docker pull $BACKEND_IMAGE
          sudo docker pull $FRONTEND_IMAGE
          
          # Start services
          echo "üöÄ Starting services..."
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile prod up -d
          
          # Wait for services
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
          
          # Health check
          echo "üè• Running health checks..."
          sudo docker compose ps
          
          # Test API
          if curl -f http://localhost:3001/api/status > /dev/null 2>&1; then
            echo "‚úÖ Backend API is responding"
          else
            echo "‚ö†Ô∏è  Backend API not responding"
          fi
          
          # Test frontend (if accessible)
          if curl -f http://localhost/ > /dev/null 2>&1; then
            echo "‚úÖ Frontend is accessible"
          else
            echo "‚ö†Ô∏è  Frontend not accessible"
          fi
          
          echo "‚úÖ Deployment completed successfully!"
          EOF
          
          # Copy and execute deployment script
          scp deploy.sh $SERVER_USER@$SERVER_HOST:/tmp/
          ssh $SERVER_USER@$SERVER_HOST "chmod +x /tmp/deploy.sh && sudo /tmp/deploy.sh"

      - name: Cleanup
        if: always()
        run: |
          rm -f deploy.sh

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully!"
            echo "üåê Application should be available at: https://${{ secrets.DOMAIN }}"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
