name: Simple Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    name: Check Configuration
    outputs:
      has-secrets: ${{ steps.check.outputs.has-secrets }}
      
    steps:
      - name: Check if deployment secrets are configured
        id: check
        run: |
          if [[ -n "${{ secrets.SERVER_HOST }}" && -n "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            echo "has-secrets=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment secrets are configured"
          else
            echo "has-secrets=false" >> $GITHUB_OUTPUT
            echo "⚠️ Deployment secrets not configured"
            echo ""
            echo "To enable automatic deployment, add these secrets to your repository:"
            echo "- SSH_PRIVATE_KEY: Your SSH private key"
            echo "- SERVER_HOST: Your server IP/hostname"
            echo "- SERVER_USER: SSH username (e.g., root)"
            echo "- DB_ROOT_PASSWORD: Database root password"
            echo "- DB_PASSWORD: Application database password"
            echo "- MQTT_USERNAME: MQTT broker username"
            echo "- MQTT_PASSWORD: MQTT broker password"
            echo "- DOMAIN: Your domain name"
          fi

  build-images:
    runs-on: ubuntu-latest
    name: Build Docker Images
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./gym_lockers
          file: ./gym_lockers/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./gym_lockers/client
          file: ./gym_lockers/client/Dockerfile.production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Images built successfully
        run: |
          echo "✅ Backend image: ${{ steps.meta-backend.outputs.tags }}"
          echo "✅ Frontend image: ${{ steps.meta-frontend.outputs.tags }}"

  deploy:
    needs: [check-secrets, build-images]
    runs-on: ubuntu-latest
    name: Deploy to Server
    if: needs.check-secrets.outputs.has-secrets == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"

      - name: Deploy application
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          BACKEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          FRONTEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        run: |
          echo "🚀 Deploying to ${{ github.event.inputs.environment || 'production' }}..."
          
          # Create simple deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "📁 Checking deployment directory..."
          if [ ! -d "/opt/gym-lockers" ]; then
            echo "Creating deployment directory..."
            sudo mkdir -p /opt/gym-lockers
            cd /opt/gym-lockers
            sudo git clone https://github.com/${{ github.repository }}.git .
          else
            cd /opt/gym-lockers
            sudo git fetch origin
            sudo git reset --hard origin/main
          fi
          
          echo "🐳 Logging into container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          echo "📥 Pulling latest images..."
          sudo docker pull $BACKEND_IMAGE || echo "Failed to pull backend image"
          sudo docker pull $FRONTEND_IMAGE || echo "Failed to pull frontend image"
          
          echo "🔄 Updating containers..."
          sudo docker compose down || true
          
          # Create a simple override file if needed
          if [ ! -f docker-compose.override.yml ]; then
            cat > docker-compose.override.yml << OVERRIDE
          version: '3.8'
          services:
            backend:
              image: $BACKEND_IMAGE
            frontend-builder:
              image: $FRONTEND_IMAGE
          OVERRIDE
          fi
          
          sudo docker compose --profile prod up -d
          
          echo "⏳ Waiting for services..."
          sleep 30
          
          echo "🏥 Health check..."
          sudo docker compose ps
          
          if curl -f http://localhost:3001/api/status > /dev/null 2>&1; then
            echo "✅ API is responding"
          else
            echo "⚠️ API not responding"
          fi
          
          echo "✅ Deployment completed!"
          EOF
          
          # Execute deployment
          scp deploy.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
          
      - name: Cleanup
        if: always()
        run: rm -f deploy.sh

  notify:
    needs: [check-secrets, build-images, deploy]
    runs-on: ubuntu-latest
    name: Notification
    if: always()
    
    steps:
      - name: Report status
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.check-secrets.outputs.has-secrets }}" == "true" ]]; then
            if [[ "${{ needs.deploy.result }}" == "success" ]]; then
              echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
              echo "🌐 **Application should be available at your configured domain**" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Deployment failed**" >> $GITHUB_STEP_SUMMARY
              echo "Check the deploy job logs for details" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **Deployment skipped - secrets not configured**" >> $GITHUB_STEP_SUMMARY
            echo "Add deployment secrets to enable automatic deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Docker images built and pushed to registry**" >> $GITHUB_STEP_SUMMARY
