{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import io from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext();export const useSocket=()=>{const context=useContext(SocketContext);if(!context){throw new Error('useSocket must be used within a SocketProvider');}return context;};export const SocketProvider=_ref=>{let{children}=_ref;const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[offlineAlerts,setOfflineAlerts]=useState([]);useEffect(()=>{let newSocket=null;const connectSocket=()=>{// Clean up existing socket if any\nif(newSocket){newSocket.removeAllListeners();newSocket.close();}// Create new socket connection\nnewSocket=io('http://localhost:3001',{transports:['websocket'],reconnectionDelay:1000,reconnectionDelayMax:5000,reconnectionAttempts:10,timeout:20000,withCredentials:true});// Set up event handlers\nnewSocket.on('connect',()=>{console.log('🔗 Connected to server via Socket.IO');setIsConnected(true);});newSocket.on('disconnect',()=>{console.log('🔌 Disconnected from server');setIsConnected(false);});newSocket.on('connect_error',error=>{console.error('❌ Socket.IO connection error:',error);setIsConnected(false);});newSocket.on('reconnect_attempt',attemptNumber=>{console.log(\"\\uD83D\\uDD04 Socket.IO reconnection attempt #\".concat(attemptNumber));});newSocket.on('reconnect',attemptNumber=>{console.log(\"\\u2705 Socket.IO reconnected after \".concat(attemptNumber,\" attempts\"));setIsConnected(true);});newSocket.on('reconnect_failed',()=>{console.log('❌ Socket.IO reconnection failed after all attempts');// Try to establish a new connection after a delay\nsetTimeout(connectSocket,5000);});// Handle offline locker alerts\nnewSocket.on('lockers-offline',data=>{console.log('📴 Lockers went offline:',data);const newAlert={id:Date.now(),type:'offline',message:\"\".concat(data.count,\" locker(s) went offline: \").concat(data.lockers.join(', ')),timestamp:new Date()};setOfflineAlerts(prev=>[...prev,newAlert]);// Auto-remove alert after 10 seconds\nsetTimeout(()=>{setOfflineAlerts(prev=>prev.filter(alert=>alert.id!==newAlert.id));},10000);});setSocket(newSocket);};// Initial connection\nconnectSocket();// Cleanup function\nreturn()=>{if(newSocket){console.log('🧹 Cleaning up Socket.IO connection...');newSocket.removeAllListeners();newSocket.close();}};},[]);return/*#__PURE__*/_jsx(SocketContext.Provider,{value:{socket,isConnected,offlineAlerts},children:children});};export{SocketContext};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsx","_jsx","SocketContext","useSocket","context","Error","SocketProvider","_ref","children","socket","setSocket","isConnected","setIsConnected","offlineAlerts","setOfflineAlerts","newSocket","connectSocket","removeAllListeners","close","transports","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","timeout","withCredentials","on","console","log","error","attemptNumber","concat","setTimeout","data","newAlert","id","Date","now","type","message","count","lockers","join","timestamp","prev","filter","alert","Provider","value"],"sources":["/Users/michaelhanna/Documents/DEV/INZAN/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst SocketContext = createContext();\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [offlineAlerts, setOfflineAlerts] = useState([]);\n\n  useEffect(() => {\n    let newSocket = null;\n    \n    const connectSocket = () => {\n      // Clean up existing socket if any\n      if (newSocket) {\n        newSocket.removeAllListeners();\n        newSocket.close();\n      }\n\n      // Create new socket connection\n      newSocket = io('http://localhost:3001', {\n        transports: ['websocket'],\n        reconnectionDelay: 1000,\n        reconnectionDelayMax: 5000,\n        reconnectionAttempts: 10,\n        timeout: 20000,\n        withCredentials: true\n    });\n\n      // Set up event handlers\n    newSocket.on('connect', () => {\n      console.log('🔗 Connected to server via Socket.IO');\n      setIsConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('🔌 Disconnected from server');\n      setIsConnected(false);\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('❌ Socket.IO connection error:', error);\n      setIsConnected(false);\n    });\n\n      newSocket.on('reconnect_attempt', (attemptNumber) => {\n        console.log(`🔄 Socket.IO reconnection attempt #${attemptNumber}`);\n      });\n\n      newSocket.on('reconnect', (attemptNumber) => {\n        console.log(`✅ Socket.IO reconnected after ${attemptNumber} attempts`);\n        setIsConnected(true);\n      });\n\n      newSocket.on('reconnect_failed', () => {\n        console.log('❌ Socket.IO reconnection failed after all attempts');\n        // Try to establish a new connection after a delay\n        setTimeout(connectSocket, 5000);\n      });\n\n      // Handle offline locker alerts\n      newSocket.on('lockers-offline', (data) => {\n        console.log('📴 Lockers went offline:', data);\n        const newAlert = {\n          id: Date.now(),\n          type: 'offline',\n          message: `${data.count} locker(s) went offline: ${data.lockers.join(', ')}`,\n          timestamp: new Date()\n        };\n        setOfflineAlerts(prev => [...prev, newAlert]);\n        \n        // Auto-remove alert after 10 seconds\n        setTimeout(() => {\n          setOfflineAlerts(prev => prev.filter(alert => alert.id !== newAlert.id));\n        }, 10000);\n      });\n\n    setSocket(newSocket);\n    };\n\n    // Initial connection\n    connectSocket();\n\n    // Cleanup function\n    return () => {\n      if (newSocket) {\n        console.log('🧹 Cleaning up Socket.IO connection...');\n        newSocket.removeAllListeners();\n      newSocket.close();\n      }\n    };\n  }, []);\n\n  return (\n    <SocketContext.Provider value={{ socket, isConnected, offlineAlerts }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport { SocketContext }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}